{"version":3,"sources":["logo.svg","components/WealthicaOptions.tsx","environment/addon.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","WealthicaOptions","props","JSON","stringify","options","wealthica","addon","Addon","window","App","useState","setOptions","useEffect","className","src","logo","alt","Boolean","location","hostname","match","on","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,yLCW5BC,G,MAJ2B,SAACC,GAAD,OACxC,0DAAsBC,KAAKC,UAAUF,EAAMG,YCuBhCC,EAA0B,CACrCC,MAAO,IAAIC,EAHEC,OAAeD,QCFfE,EAnBH,WAAO,IAAD,EACcC,qBADd,mBACTN,EADS,KACAO,EADA,KAShB,OANAC,qBAAU,WACJP,EAAUD,SACZO,EAAWN,EAAUD,WAEtB,IAGD,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE1CZ,GAAW,kBAAC,EAAD,CAAkBA,QAASA,MCVzBa,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCXNf,EAAUC,MAAMe,GAAG,QAAQ,SAACjB,GAC1BC,EAAUD,QAAUA,EACpBkB,QAAQC,IAAI,OAAQlB,EAAUD,YAGhCC,EAAUC,MAAMe,GAAG,UAAU,SAACjB,GAE5BC,EAAUD,QAAV,eACKC,EAAUD,QADf,GAEKA,GAELkB,QAAQC,IAAI,SAAUlB,EAAUD,YAGlCoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"static/js/main.9ba9b330.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { WealthicaAddonOptions } from \"../environment/addon\";\r\n\r\ntype Props = {\r\n  options: WealthicaAddonOptions;\r\n};\r\n\r\nconst WealthicaOptions: React.FC<Props> = (props) => (\r\n  <>Wealthica Options: {JSON.stringify(props.options)}</>\r\n);\r\n\r\nexport default WealthicaOptions;\r\n","export type WealthicaAPI = {\r\n  addon: WealthicaAddon;\r\n  options?: WealthicaAddonOptions | undefined;\r\n};\r\nexport type WealthicaAddon = {\r\n  on: (\r\n    event: string,\r\n    options: (options: WealthicaAddonOptions) => void\r\n  ) => void;\r\n};\r\nexport type WealthicaAddonOptions = {\r\n  assetsEnabled: boolean;\r\n  assetsFilter: boolean;\r\n  currency: string; //\"cad\"\r\n  dateRangeFilter: string[];\r\n  deletedFilter: boolean;\r\n  fromDate: string;\r\n  groupsFilter: string;\r\n  institutionsFilter: null;\r\n  investmentsFilter: null;\r\n  language: string; //\"en\"\r\n  liabilitiesEnabled: boolean;\r\n  liabilitiesFilter: boolean;\r\n  privateMode: boolean;\r\n  readonly: boolean;\r\n  toDate: string;\r\n  token: string;\r\n};\r\n\r\nconst Addon = (window as any).Addon;\r\n\r\nexport const wealthica: WealthicaAPI = {\r\n  addon: new Addon(),\r\n};\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport WealthicaOptions from \"./components/WealthicaOptions\";\nimport { useEffect } from \"react\";\nimport { wealthica, WealthicaAddonOptions } from \"./environment/addon\";\n\nconst App = () => {\n  const [options, setOptions] = useState<WealthicaAddonOptions>();\n\n  useEffect(() => {\n    if (wealthica.options) {\n      setOptions(wealthica.options);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {options && <WealthicaOptions options={options} />}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { wealthica } from \"./environment/addon\";\n\nwealthica.addon.on(\"init\", (options) => {\n  wealthica.options = options;\n  console.log(\"init\", wealthica.options);\n});\n\nwealthica.addon.on(\"update\", (options) => {\n  // Filters have been updated and Dashboard is passing in updated options\n  wealthica.options = {\n    ...wealthica.options,\n    ...options,\n  };\n  console.log(\"update\", wealthica.options);\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}