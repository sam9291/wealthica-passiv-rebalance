{"version":3,"sources":["environment/wealthica-api.ts","fetchers/fetchers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["wealthica","addon","Addon","window","fetchPositions","options","api","getPositions","groups","groupsFilter","institutions","institutionsFilter","investments","investmentsFilter","fetchInstitutions","getInstitutions","fetchTargets","request","method","endpoint","then","res","token","data","JSON","parse","atob","fetchRebalanceActions","requestQuery","url","params","init","requestUrl","URL","search","URLSearchParams","toString","fetch","json","undefined","body","stringify","buttonStyle","margin","Row","props","quantity","positions","find","x","security","symbol","component","rebalanceAction","actions","actionQuantity","units","action","price","percentOfPortfolio","App","useState","isInitialized","setIsInitialized","generateBuyOnly","setGenerateBuyOnly","setOptions","targetRepository","setTargetRepository","selectedPortfolio","setSelectedPortfolio","setPositions","setInstitutions","rebalanceActions","setRebalanceActions","cashBalances","Object","keys","flatMap","map","currency","reduce","getBalancePerCurrency","amount","filter","i","total","investment","cash","useEffect","on","console","log","prev","a","result","targetResults","institutionsResults","refreshPositions","select","portfolio","buy_only","slice","targets","components","percent","balances","className","position","type","checked","onClick","portfolios","p","style","portfolioName","c","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPA0KaA,G,MAA0B,CACrCC,MAAO,IAAIC,EAHEC,OAAeD,SClJxBE,EAAiB,SAACC,GAAD,OACrBL,EAAUC,MAAMK,IAAIC,aAAa,CAC/BC,OAAQH,EAAQI,aAChBC,aAAcL,EAAQM,mBACtBC,YAAaP,EAAQQ,qBAGnBC,EAAoB,SACxBT,GADwB,OAGxBL,EAAUC,MAAMK,IAAIS,gBAAgB,CAClCP,OAAQH,EAAQI,aAChBC,aAAcL,EAAQM,mBACtBC,YAAaP,EAAQQ,qBAGnBG,EAAe,kBACnBhB,EAAUC,MACPgB,QAAQ,CACPC,OAAQ,MACRC,SAAU,0CAEXC,MAAK,SAACC,GAAD,OAhCYC,EAgCUD,EAAIE,KAhCIC,KAAKC,MAAMC,KAAKJ,IAAnC,IAACA,MAkChBK,EAAwB,SAC5BC,GAD4B,OAhCd,SAACC,EAAaC,EAAcC,GAC1C,IAAMC,EAAa,IAAIC,IAAIJ,GAI3B,OAHIC,IACFE,EAAWE,OAAS,IAAIC,gBAAgBL,GAAQM,YAE3CC,MAAML,EAAWI,WAAYL,GAAMX,MAAK,SAACC,GAAD,OAASA,EAAIiB,UA8B5DrB,CAAQ,mDAA+CsB,EAAW,CAChErB,OAAQ,OACRsB,KAAMhB,KAAKiB,UAAUb,MC7BnBc,EAAc,CAAEC,OAAQ,GAQxBC,EAA0B,SAACC,GAAW,IAAD,EACnCC,GACJ,UAAAD,EAAME,UAAUC,MAAK,SAACC,GAAD,OAAOA,EAAEC,SAASC,SAAWN,EAAMO,UAAUD,iBAAlE,eACIL,WAAY,EACZO,EAAkBR,EAAMS,QAAQN,MACpC,SAACC,GAAD,OAAOA,EAAEE,SAAWN,EAAMO,UAAUD,UAGlCI,EAAiB,EAOrB,OANIF,IACFE,EAAiBF,EAAgBG,MACF,SAA3BH,EAAgBI,SAClBF,IAAmB,IAIrB,4BACE,4BAAKV,EAAMO,UAAUD,QACrB,6BAAoB,OAAfE,QAAe,IAAfA,OAAA,EAAAA,EAAiBK,QAAS,KAC/B,4BAAKb,EAAMO,UAAUO,oBACrB,4BAAKb,GACL,4BAAKS,GAAkB,IACvB,4BAAKT,EAAWS,KA2KPK,EAtKH,WAAO,IAAD,EAC0BC,oBAAS,GADnC,mBACTC,EADS,KACMC,EADN,OAE8BF,oBAAS,GAFvC,mBAETG,EAFS,KAEQC,EAFR,OAGcJ,qBAHd,mBAGTxD,EAHS,KAGA6D,EAHA,OAIgCL,qBAJhC,mBAITM,EAJS,KAISC,EAJT,OAOkCP,qBAPlC,mBAOTQ,EAPS,KAOUC,EAPV,OAQkBT,mBAAqB,IARvC,mBAQTd,EARS,KAQEwB,EARF,OASwBV,mBAAwB,IAThD,mBASTnD,EATS,KASK8D,EATL,OAUgCX,mBAC9C,IAXc,mBAUTY,EAVS,KAUSC,EAVT,KA0BVC,EAbqBC,OAAOC,KAChCnE,EACGoE,SAAQ,SAAC7B,GAAD,OAAOA,EAAErC,eACjBmE,KAAI,SAAC9B,GAAD,OAAOA,EAAE+B,YACbC,QACC,SAACF,EAAKC,GAAN,sBACKD,EADL,eAEGC,EAAW,MAEd,KAIkCD,KAAI,SAACC,GAAD,OAC1CE,EAAsBF,MAGlBE,EAAwB,SAACF,GAAD,MAAuB,CACnDA,SAAUA,EACVG,OAAQzE,EACLoE,SAAQ,SAAC7B,GAAD,OAAOA,EAAErC,YAAYwE,QAAO,SAACC,GAAD,OAAOA,EAAEL,WAAaA,QAC1DC,QAAO,SAACK,EAAOC,GAAR,OAAuBD,EAAQC,EAAWC,OAAM,KAG5DC,qBAAU,WACH3B,IACHC,GAAiB,GAEjB/D,EAAUC,MAAMyF,GAAG,QAAQ,SAACrF,GAC1B6D,EAAW7D,GACXsF,QAAQC,IAAI,OAAQvF,MAGtBL,EAAUC,MAAMyF,GAAG,UAAU,SAACrF,GAE5B6D,GAAW,SAAC2B,GAAD,sBACNA,EADM,GAENxF,MAELsF,QAAQC,IAAI,SAAUvF,SAGzB,CAACyD,IAEJ2B,qBAAU,YACc,uCAAG,gCAAAK,EAAA,0DACnBzF,EADmB,iCAEAD,EAAeC,GAFf,cAEf0F,EAFe,OAGrBxB,EAAawB,GAHQ,SAKO/E,IALP,cAKfgF,EALe,OAMrB5B,EAAoB4B,GANC,UAQalF,EAAkBT,GAR/B,QAQf4F,EARe,OASrBzB,EAAgByB,GATK,4CAAH,qDAatBC,KACC,CAAC7F,IAEJ,IAAM8F,EAAM,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACQnE,EAAsB,CACzC0E,SAAUrC,EACVjB,UAAWA,EACRgC,KAAI,SAAC9B,GAAD,MAAQ,CACXE,OAAQF,EAAEC,SAASC,OACnBK,MAAOP,EAAEH,aAEVwD,MAAM,EAAG,IACZC,QAASH,EAAUI,WAAWzB,KAAI,SAAC9B,GAAD,MAAQ,CACxCwD,QAASxD,EAAEU,mBACXR,OAAQF,EAAEE,WAEZuD,SAAU/B,IAbC,OACPoB,EADO,OAebrB,EAAoBqB,GACpBzB,EAAqB8B,GAhBR,2CAAH,sDAmBZ,OACE,yBAAKO,UAAU,OACb,0CACA,+BACE,4BACE,sCACA,yCAED5D,EAAUgC,KAAI,SAAC6B,GAAD,OACb,4BACE,4BAAKA,EAAS1D,SAASC,QACvB,4BAAKyD,EAAS9D,eAIpB,4CACA,+BACE,4BACE,wCACA,wCAED6B,EAAaI,KAAI,SAAC9B,GAAD,OAChB,4BACE,4BAAKA,EAAE+B,UACP,4BAAK/B,EAAEkC,aAIb,wCACA,6BACGhB,GACC,oCACE,0CACA,2BACE0C,KAAK,WACLC,QAAS9C,EACT+C,QAAS,kBAAM9C,GAAoBD,MAEpCG,EAAiB6C,WAAWjC,KAAI,SAACkC,GAAD,OAC/B,4BAAQF,QAAS,kBAAMZ,EAAOc,IAAIC,MAAOxE,GACtCuE,EAAEE,oBAOZ9C,GAAqBtB,GACpB,oCACE,4BAAKsB,EAAkB8C,eACvB,+BACE,4BACE,sCACA,qCACA,sCACA,gDACA,wCACA,uCAED9C,EAAkBmC,WAAWzB,KAAI,SAACqC,GAAD,OAChC,kBAAC,EAAD,CACEhE,UAAWgE,EACXrE,UAAWA,EACXO,QAASmB,WCzML4C,QACW,cAA7BlH,OAAOmH,SAASC,UAEe,UAA7BpH,OAAOmH,SAASC,UAEhBpH,OAAOmH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5G,MAAK,SAAA6G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.372793b2.chunk.js","sourcesContent":["export type WealthicaAPI = {\r\n  addon: WealthicaAddon;\r\n};\r\nexport type WealthicaAddon = {\r\n  on: (\r\n    event: string,\r\n    options: (options: WealthicaAddonOptions) => void\r\n  ) => void;\r\n  request: (query: {\r\n    method: string;\r\n    endpoint: string;\r\n    query?: any;\r\n  }) => Promise<any>;\r\n  api: {\r\n    getPositions: (query: {\r\n      groups?: string;\r\n      institutions?: string;\r\n      investments?: string;\r\n    }) => Promise<Position[]>;\r\n    getInstitutions: (query: {\r\n      groups?: string;\r\n      institutions?: string;\r\n      investments?: string;\r\n    }) => Promise<Institution[]>;\r\n  };\r\n};\r\nexport type WealthicaAddonOptions = {\r\n  assetsEnabled: boolean;\r\n  assetsFilter: boolean;\r\n  currency: string; //\"cad\"\r\n  dateRangeFilter: string[];\r\n  deletedFilter: boolean;\r\n  fromDate: string;\r\n  groupsFilter: string;\r\n  institutionsFilter: string | undefined;\r\n  investmentsFilter: string | undefined;\r\n  language: string; //\"en\"\r\n  liabilitiesEnabled: boolean;\r\n  liabilitiesFilter: boolean;\r\n  privateMode: boolean;\r\n  readonly: boolean;\r\n  toDate: string;\r\n  token: string;\r\n};\r\n\r\nexport type Investment = {\r\n  institution: string;\r\n  investment: string;\r\n  quantity: number;\r\n  book_value: number;\r\n  market_value: number;\r\n  currency: string;\r\n  value: number;\r\n  gain_percent: number;\r\n  gain_currency_amount: number;\r\n  gain_amount: number;\r\n};\r\n\r\nexport type Position = {\r\n  category: string;\r\n  class: string;\r\n  _id: string;\r\n  security: {\r\n    _id: string;\r\n    currency: string;\r\n    symbol: string;\r\n    type: string;\r\n    name: string;\r\n    last_price: number;\r\n    high_date: string;\r\n    high_price: number;\r\n    low_date: string;\r\n    low_price: number;\r\n    last_date: string;\r\n    aliases: string[];\r\n    id: string;\r\n  };\r\n  investments: Investment[];\r\n  value: number;\r\n  book_value: number;\r\n  market_value: number;\r\n  quantity: number;\r\n  gain_percent: number;\r\n  gain_currency_amount: number;\r\n  currency: string;\r\n  gain_amount: number;\r\n  id: string;\r\n};\r\n\r\nexport type Institution = {\r\n  _id: string;\r\n  user: string;\r\n  name: string;\r\n  type: string;\r\n  sync_status: string;\r\n  __v: number;\r\n  sync_date: string;\r\n  sync_transactions: boolean;\r\n  sync_documents: boolean;\r\n  investments: [\r\n    {\r\n      name: string;\r\n      _id: string;\r\n      currency_value: number;\r\n      groups: string[];\r\n      ignored: false;\r\n      inactive: false;\r\n      cash: number;\r\n      group: string;\r\n      id: string;\r\n      type: string;\r\n      currency: string;\r\n      registered: boolean;\r\n      book_value: null;\r\n      market_value: null;\r\n      value: number;\r\n      overall_roi: null;\r\n      gain_percent: null;\r\n      overall_currency_gain: null;\r\n      gain_amount: null;\r\n      gain_currency_amount: null;\r\n      overall_gain: null;\r\n      positions: [\r\n        {\r\n          category: string;\r\n          class: string;\r\n          security: {\r\n            _id: string;\r\n            currency: string;\r\n            symbol: string;\r\n            type: string;\r\n            name: string;\r\n            last_price: number;\r\n            high_date: string;\r\n            high_price: number;\r\n            low_date: string;\r\n            low_price: number;\r\n            last_date: string;\r\n            aliases: string[];\r\n            id: string;\r\n          };\r\n          gain_amount: number;\r\n          gain_currency_amount: number;\r\n          gain_percent: number;\r\n          value: number;\r\n          currency: string;\r\n          market_value: number;\r\n          book_value: number;\r\n          quantity: number;\r\n          investment: number;\r\n          institution: number;\r\n        }\r\n      ];\r\n    }\r\n  ];\r\n  book_value: number | null;\r\n  market_value: number | null;\r\n  value: number;\r\n  cash: number;\r\n  creation_date: string;\r\n  accounts: string[];\r\n  overall_roi: string | null;\r\n  gain_percent: string | null;\r\n  overall_gain: string | null;\r\n  gain_amount: string | null;\r\n  id: string;\r\n};\r\n\r\nconst Addon = (window as any).Addon;\r\n\r\nexport const wealthica: WealthicaAPI = {\r\n  addon: new Addon(),\r\n};\r\n","import {\r\n  Position,\r\n  WealthicaAddonOptions,\r\n  wealthica,\r\n  Institution,\r\n} from \"../environment/wealthica-api\";\r\nimport {\r\n  PortfolioTargetRepository,\r\n  FetchRebalanceActionsQuery,\r\n  RebalanceAction,\r\n} from \"../environment/passiv-api\";\r\n\r\nconst parsePayload = (token: string) => JSON.parse(atob(token));\r\n\r\nconst request = (url: string, params?: any, init?: RequestInit | undefined) => {\r\n  const requestUrl = new URL(url);\r\n  if (params) {\r\n    requestUrl.search = new URLSearchParams(params).toString();\r\n  }\r\n  return fetch(requestUrl.toString(), init).then((res) => res.json());\r\n};\r\n\r\nconst fetchPositions = (options: WealthicaAddonOptions): Promise<Position[]> =>\r\n  wealthica.addon.api.getPositions({\r\n    groups: options.groupsFilter,\r\n    institutions: options.institutionsFilter,\r\n    investments: options.investmentsFilter,\r\n  });\r\n\r\nconst fetchInstitutions = (\r\n  options: WealthicaAddonOptions\r\n): Promise<Institution[]> =>\r\n  wealthica.addon.api.getInstitutions({\r\n    groups: options.groupsFilter,\r\n    institutions: options.institutionsFilter,\r\n    investments: options.investmentsFilter,\r\n  });\r\n\r\nconst fetchTargets = (): Promise<PortfolioTargetRepository> =>\r\n  wealthica.addon\r\n    .request({\r\n      method: \"GET\",\r\n      endpoint: \"preferences/addons/passiv/passiv-lite\",\r\n    })\r\n    .then((res) => parsePayload(res.data));\r\n\r\nconst fetchRebalanceActions = (\r\n  requestQuery: FetchRebalanceActionsQuery\r\n): Promise<RebalanceAction[]> =>\r\n  request(\"https://getpassiv.com/api/v1/embeddedTrades\", undefined, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(requestQuery),\r\n  });\r\n\r\nexport {\r\n  fetchPositions,\r\n  fetchTargets,\r\n  fetchRebalanceActions,\r\n  fetchInstitutions,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  Position,\n  wealthica,\n  WealthicaAddonOptions,\n  Institution,\n} from \"./environment/wealthica-api\";\nimport {\n  fetchPositions,\n  fetchTargets,\n  fetchRebalanceActions,\n  fetchInstitutions,\n} from \"./fetchers/fetchers\";\nimport {\n  PortfolioTargetRepository,\n  PortfolioTarget,\n  SymbolTarget,\n  RebalanceAction,\n  Balance,\n} from \"./environment/passiv-api\";\n\nconst buttonStyle = { margin: 8 };\n\ntype RowProps = {\n  component: SymbolTarget;\n  positions: Position[];\n  actions: RebalanceAction[];\n};\n\nconst Row: React.FC<RowProps> = (props) => {\n  const quantity =\n    props.positions.find((x) => x.security.symbol === props.component.symbol)\n      ?.quantity || 0;\n  const rebalanceAction = props.actions.find(\n    (x) => x.symbol === props.component.symbol\n  );\n\n  let actionQuantity = 0;\n  if (rebalanceAction) {\n    actionQuantity = rebalanceAction.units;\n    if (rebalanceAction.action === \"SELL\") {\n      actionQuantity *= -1;\n    }\n  }\n  return (\n    <tr>\n      <td>{props.component.symbol}</td>\n      <td>{rebalanceAction?.price || \"-\"}</td>\n      <td>{props.component.percentOfPortfolio}</td>\n      <td>{quantity}</td>\n      <td>{actionQuantity || \"\"}</td>\n      <td>{quantity + actionQuantity}</td>\n    </tr>\n  );\n};\n\nconst App = () => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [generateBuyOnly, setGenerateBuyOnly] = useState(false);\n  const [options, setOptions] = useState<WealthicaAddonOptions>();\n  const [targetRepository, setTargetRepository] = useState<\n    PortfolioTargetRepository\n  >();\n  const [selectedPortfolio, setSelectedPortfolio] = useState<PortfolioTarget>();\n  const [positions, setPositions] = useState<Position[]>([]);\n  const [institutions, setInstitutions] = useState<Institution[]>([]);\n  const [rebalanceActions, setRebalanceActions] = useState<RebalanceAction[]>(\n    []\n  );\n  const distinctCurrencies = Object.keys(\n    institutions\n      .flatMap((x) => x.investments)\n      .map((x) => x.currency)\n      .reduce(\n        (map, currency) => ({\n          ...map,\n          [currency]: 1,\n        }),\n        {}\n      )\n  );\n\n  const cashBalances = distinctCurrencies.map((currency) =>\n    getBalancePerCurrency(currency)\n  );\n\n  const getBalancePerCurrency = (currency: string) => ({\n    currency: currency,\n    amount: institutions\n      .flatMap((x) => x.investments.filter((i) => i.currency === currency))\n      .reduce((total, investment) => total + investment.cash, 0),\n  });\n\n  useEffect(() => {\n    if (!isInitialized) {\n      setIsInitialized(true);\n\n      wealthica.addon.on(\"init\", (options) => {\n        setOptions(options);\n        console.log(\"init\", options);\n      });\n\n      wealthica.addon.on(\"update\", (options) => {\n        // Filters have been updated and Dashboard is passing in updated options\n        setOptions((prev) => ({\n          ...prev,\n          ...options,\n        }));\n        console.log(\"update\", options);\n      });\n    }\n  }, [isInitialized]);\n\n  useEffect(() => {\n    const refreshPositions = async () => {\n      if (options) {\n        const result = await fetchPositions(options);\n        setPositions(result);\n\n        const targetResults = await fetchTargets();\n        setTargetRepository(targetResults);\n\n        const institutionsResults = await fetchInstitutions(options);\n        setInstitutions(institutionsResults);\n      }\n    };\n\n    refreshPositions();\n  }, [options]);\n\n  const select = async (portfolio: PortfolioTarget) => {\n    const result = await fetchRebalanceActions({\n      buy_only: generateBuyOnly,\n      positions: positions\n        .map((x) => ({\n          symbol: x.security.symbol,\n          units: x.quantity,\n        }))\n        .slice(0, 25),\n      targets: portfolio.components.map((x) => ({\n        percent: x.percentOfPortfolio,\n        symbol: x.symbol,\n      })),\n      balances: cashBalances,\n    });\n    setRebalanceActions(result);\n    setSelectedPortfolio(portfolio);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Positions:</h1>\n      <table>\n        <tr>\n          <th>Symbol</th>\n          <th>Quantity</th>\n        </tr>\n        {positions.map((position) => (\n          <tr>\n            <td>{position.security.symbol}</td>\n            <td>{position.quantity}</td>\n          </tr>\n        ))}\n      </table>\n      <h1>Cash Balance</h1>\n      <table>\n        <tr>\n          <th>Currency</th>\n          <th>Balance</th>\n        </tr>\n        {cashBalances.map((x) => (\n          <tr>\n            <td>{x.currency}</td>\n            <td>{x.amount}</td>\n          </tr>\n        ))}\n      </table>\n      <h1>Targets:</h1>\n      <div>\n        {targetRepository && (\n          <>\n            <span>Buy only</span>\n            <input\n              type=\"checkbox\"\n              checked={generateBuyOnly}\n              onClick={() => setGenerateBuyOnly(!generateBuyOnly)}\n            />\n            {targetRepository.portfolios.map((p) => (\n              <button onClick={() => select(p)} style={buttonStyle}>\n                {p.portfolioName}\n              </button>\n            ))}\n          </>\n        )}\n      </div>\n\n      {selectedPortfolio && positions && (\n        <>\n          <h1>{selectedPortfolio.portfolioName}</h1>\n          <table>\n            <tr>\n              <th>Symbol</th>\n              <th>Price</th>\n              <th>Target</th>\n              <th>Current Quantity</th>\n              <th>Buy/Sell</th>\n              <th>Result</th>\n            </tr>\n            {selectedPortfolio.components.map((c) => (\n              <Row\n                component={c}\n                positions={positions}\n                actions={rebalanceActions}\n              />\n            ))}\n          </table>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}