{"version":3,"sources":["logo.svg","components/WealthicaOptions.tsx","environment/wealthica-api.ts","fetchers/fetchers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","WealthicaOptions","props","JSON","stringify","options","wealthica","addon","Addon","window","fetchPositions","url","params","groups","groupsFilter","institutions","institutionsFilter","investments","investmentsFilter","URL","search","URLSearchParams","toString","fetch","then","res","json","App","useState","isInitialized","setIsInitialized","setOptions","positions","setPositions","useEffect","on","console","log","prev","a","result","refreshPositions","className","src","logo","alt","map","position","security","symbol","quantity","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,gNCW5BC,G,MAJ2B,SAACC,GAAD,OACxC,0DAAsBC,KAAKC,UAAUF,EAAMG,YCkEhCC,EAA0B,CACrCC,MAAO,IAAIC,EAHEC,OAAeD,QChExBE,EAAiB,SAACL,GAAD,OANVM,EAOP,0CAPoBC,EAOuB,CAC7CC,OAAQR,EAAQS,aAChBC,aAAcV,EAAQW,mBACtBC,YAAaZ,EAAQa,mBATJ,IAAIC,IAAIR,GAChBS,OAAS,IAAIC,gBAAgBT,GAAQU,WACzCC,MAAMZ,GAAKa,MAAK,SAACC,GAAD,OAASA,EAAIC,UAH1B,IAACf,EAAaC,GC8DXe,EArDH,WAAO,IAAD,EAC0BC,oBAAS,GADnC,mBACTC,EADS,KACMC,EADN,OAEcF,qBAFd,mBAETvB,EAFS,KAEA0B,EAFA,OAGkBH,mBAAqB,IAHvC,mBAGTI,EAHS,KAGEC,EAHF,KAoChB,OA/BAC,qBAAU,WACHL,IACHC,GAAiB,GAEjBxB,EAAUC,MAAM4B,GAAG,QAAQ,SAAC9B,GAC1B0B,EAAW1B,GACX+B,QAAQC,IAAI,OAAQhC,MAGtBC,EAAUC,MAAM4B,GAAG,UAAU,SAAC9B,GAE5B0B,GAAW,SAACO,GAAD,sBACNA,EADM,GAENjC,MAEL+B,QAAQC,IAAI,SAAUhC,SAGzB,CAACwB,IAEJK,qBAAU,YACc,uCAAG,4BAAAK,EAAA,0DACnBlC,EADmB,gCAEAK,EAAeL,GAFf,OAEfmC,EAFe,OAGrBP,EAAaO,GAHQ,2CAAH,qDAOtBC,KACC,CAACpC,IAGF,yBAAKqC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE1CxC,GAAW,kBAAC,EAAD,CAAkBA,QAASA,IAEvC,0CACA,4BACG2B,EAAUc,KAAI,SAACC,GAAD,OACb,sCAAQA,EAASC,SAASC,OAA1B,aAAqCF,EAASG,iBC7CpCC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.f8ff3ecb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { WealthicaAddonOptions } from \"../environment/wealthica-api\";\r\n\r\ntype Props = {\r\n  options: WealthicaAddonOptions;\r\n};\r\n\r\nconst WealthicaOptions: React.FC<Props> = (props) => (\r\n  <>Wealthica Options: {JSON.stringify(props.options)}</>\r\n);\r\n\r\nexport default WealthicaOptions;\r\n","export type WealthicaAPI = {\r\n  addon: WealthicaAddon;\r\n};\r\nexport type WealthicaAddon = {\r\n  on: (\r\n    event: string,\r\n    options: (options: WealthicaAddonOptions) => void\r\n  ) => void;\r\n};\r\nexport type WealthicaAddonOptions = {\r\n  assetsEnabled: boolean;\r\n  assetsFilter: boolean;\r\n  currency: string; //\"cad\"\r\n  dateRangeFilter: string[];\r\n  deletedFilter: boolean;\r\n  fromDate: string;\r\n  groupsFilter: string;\r\n  institutionsFilter: null;\r\n  investmentsFilter: null;\r\n  language: string; //\"en\"\r\n  liabilitiesEnabled: boolean;\r\n  liabilitiesFilter: boolean;\r\n  privateMode: boolean;\r\n  readonly: boolean;\r\n  toDate: string;\r\n  token: string;\r\n};\r\n\r\nexport type Investment = {\r\n  institution: string;\r\n  investment: string;\r\n  quantity: number;\r\n  book_value: number;\r\n  market_value: number;\r\n  currency: string;\r\n  value: number;\r\n  gain_percent: number;\r\n  gain_currency_amount: number;\r\n  gain_amount: number;\r\n};\r\n\r\nexport type Position = {\r\n  category: string;\r\n  class: string;\r\n  _id: string;\r\n  security: {\r\n    _id: string;\r\n    currency: string;\r\n    symbol: string;\r\n    type: string;\r\n    name: string;\r\n    last_price: number;\r\n    high_date: string;\r\n    high_price: number;\r\n    low_date: string;\r\n    low_price: number;\r\n    last_date: string;\r\n    aliases: string[];\r\n    id: string;\r\n  };\r\n  investments: Investment[];\r\n  value: number;\r\n  book_value: number;\r\n  market_value: number;\r\n  quantity: number;\r\n  gain_percent: number;\r\n  gain_currency_amount: number;\r\n  currency: string;\r\n  gain_amount: number;\r\n  id: string;\r\n};\r\n\r\nconst Addon = (window as any).Addon;\r\n\r\nexport const wealthica: WealthicaAPI = {\r\n  addon: new Addon(),\r\n};\r\n","import { Position, WealthicaAddonOptions } from \"../environment/wealthica-api\";\r\n\r\nconst get = (url: string, params: any) => {\r\n  const requestUrl = new URL(url);\r\n  requestUrl.search = new URLSearchParams(params).toString();\r\n  return fetch(url).then((res) => res.json());\r\n};\r\n\r\nconst fetchPositions = (options: WealthicaAddonOptions): Promise<Position[]> =>\r\n  get(\"https://app.wealthica.com/api/positions\", {\r\n    groups: options.groupsFilter,\r\n    institutions: options.institutionsFilter,\r\n    investments: options.investmentsFilter,\r\n  });\r\n\r\nexport { fetchPositions };\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WealthicaOptions from \"./components/WealthicaOptions\";\nimport {\n  Position,\n  wealthica,\n  WealthicaAddonOptions,\n} from \"./environment/wealthica-api\";\nimport { fetchPositions } from \"./fetchers/fetchers\";\n\nconst App = () => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [options, setOptions] = useState<WealthicaAddonOptions>();\n  const [positions, setPositions] = useState<Position[]>([]);\n\n  useEffect(() => {\n    if (!isInitialized) {\n      setIsInitialized(true);\n\n      wealthica.addon.on(\"init\", (options) => {\n        setOptions(options);\n        console.log(\"init\", options);\n      });\n\n      wealthica.addon.on(\"update\", (options) => {\n        // Filters have been updated and Dashboard is passing in updated options\n        setOptions((prev) => ({\n          ...prev,\n          ...options,\n        }));\n        console.log(\"update\", options);\n      });\n    }\n  }, [isInitialized]);\n\n  useEffect(() => {\n    const refreshPositions = async () => {\n      if (options) {\n        const result = await fetchPositions(options);\n        setPositions(result);\n      }\n    };\n\n    refreshPositions();\n  }, [options]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {options && <WealthicaOptions options={options} />}\n\n      <h1>Positions:</h1>\n      <ul>\n        {positions.map((position) => (\n          <li>{`${position.security.symbol}: ${position.quantity}`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}